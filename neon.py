{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "299f36c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "NUMWORLD MODULE\n",
    "This module is executed on python .it has several constants and functions.\n",
    "                                      Devoleped by satish\n",
    "constants\n",
    "\"\"\"\n",
    "pi=3.141592653589793238462643383279\n",
    "e=2.718281828459045235460\n",
    "mp=1.672621777*(10**-27)\n",
    "mn=1.674927351*(10**-27)\n",
    "me=9.10938291*(10**-31)\n",
    "h=6.62606957*(10**-34)\n",
    "H=h/(2*pi)\n",
    "R=8.3144621\n",
    "F=96485.3365\n",
    "Na=6.02214129*(10**23)\n",
    "Bk=1.3806488*(10**-23)\n",
    "Eo=8.854187817*(10**-12)\n",
    "Uo=1.256637061*(10**-6)\n",
    "g=9.80665\n",
    "Go=7.748091735*(10**-5)\n",
    "G=6.67384*(10**-11)\n",
    "atm=101325\n",
    "C=299792458\n",
    "prime=2**82589933-1\n",
    "phi=1.61803398874989484820458683\n",
    "rad=180/pi\n",
    "deg=pi/180\n",
    "documentation on functions\n",
    "\n",
    "\"\"\"\n",
    "•\tfib(n) : returns highest fibonacci number below n\n",
    "\n",
    "•\tisprime(n) : checks the number prime or not\n",
    "\n",
    "•\tiscomposite(n): checks the number composite  or not\n",
    "\n",
    "•\tisperfect(n) :  checks the number perfect or not\n",
    "\n",
    "•\tissquare(n) : checks the number perfect square or not\n",
    "\n",
    "•\trfact(n) : reverse factorial u gives 120 it returns 5.0\n",
    "\n",
    "•\tcomfact(*n) : it returns the all common factors to a tuple of integers or list of integers\n",
    "\n",
    "•\tisnsquare(n) : return true when number is not square\n",
    "\n",
    "•\tnprimes(n) : it returns list of n primes from starting prime (2)\n",
    "\n",
    "•\tlimprimes(n1,n2) : it takes two numbers as arguements and return all primes between them\n",
    "\n",
    "•\ttables(tables=1,multiple=10,step=1) : it shows a table for children with any table and multiple means upto which number we want to multiply\n",
    "o\tstep means like indexing in list\n",
    "\n",
    "•\tmaxpow(fact,num) : it takes factorial in form of \"n!\" and return how many multiples of num present in its elongated form\n",
    "\n",
    "•\tprimefact(n) : return all prime factors of number n\n",
    "•\t\"\"\"\n",
    "\n",
    "#Functions:\n",
    "\n",
    "def fib(n):\n",
    "    a=0\n",
    "    b=1\n",
    "    c=0\n",
    "    while(c<=n):\n",
    "       c=a+b\n",
    "       a=b\n",
    "       b=c\n",
    "       if c<=n:\n",
    "           temp=c\n",
    "    return temp\n",
    "\n",
    "def isprime(n):                  \n",
    "    c=0\n",
    "    for i in range(1,n+1):\n",
    "        if n%i==0:\n",
    "            c+=1\n",
    "\n",
    "    if(c==2):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "def iscomposite(n):\n",
    "    c=0\n",
    "    for i in range(1,n+1):\n",
    "        if n%i==0:\n",
    "            c+=1\n",
    "\n",
    "    if(c==2):\n",
    "        return False\n",
    "    else:\n",
    "        return True\n",
    "\n",
    "\n",
    "def issquare(n):\n",
    "    c=n**0.5\n",
    "    if c==int(c):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "def isnsquare(n):\n",
    "    c=n**0.5\n",
    "    if c==int(c):\n",
    "        return False\n",
    "    else:\n",
    "        return True\n",
    "\n",
    "def isperfect(n):\n",
    "    p=1\n",
    "    for i in range(1,n):\n",
    "        if n%i==0:\n",
    "            p=p*i\n",
    "    if n==p:\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "def rfact(n):\n",
    "    if n==1 or n==0:\n",
    "        return 1\n",
    "    else:\n",
    "        i=1\n",
    "        while(1):\n",
    "            if n%i==0:\n",
    "                n=n/i\n",
    "                i=i+1\n",
    "                if n==i:\n",
    "                    return n\n",
    "                else:\n",
    "                    pass\n",
    "            else:\n",
    "                return None\n",
    "\n",
    "\n",
    "\n",
    "def comfact(*n):\n",
    "    l=[]\n",
    "    for i in range(1,(min(n)+1)):\n",
    "        c=0\n",
    "        for j in range(len(n)):\n",
    "            if n[j]%i==0:\n",
    "                c=c+1\n",
    "        if c==len(n):\n",
    "            l.append(i)\n",
    "        else:\n",
    "            pass\n",
    "    return l\n",
    "\n",
    "\n",
    "  \n",
    "def nprimes(n):\n",
    "    l=[]\n",
    "    x=2\n",
    "    while(len(l)<n):\n",
    "        c=0\n",
    "        for i in range(1,x+1):\n",
    "            if x%i==0:\n",
    "                c=c+1\n",
    "        if c==2:\n",
    "            l.append(i)\n",
    "        x=x+1\n",
    "    return l\n",
    "        \n",
    "\n",
    "\n",
    "def limprimes(n1,n2):\n",
    "    l=[]\n",
    "    for i in range(n1,n2+1):\n",
    "        c=0\n",
    "        for j in range(1,i+1):\n",
    "            if i%j==0:\n",
    "                c=c+1\n",
    "        if(c==2):\n",
    "            l.append(i)\n",
    "        else:\n",
    "            pass\n",
    "    return l\n",
    "        \n",
    "            \n",
    "\n",
    "\n",
    "def tables(t=1,n=10,step=1):\n",
    "    i=0\n",
    "    while(i<=n):\n",
    "        print(\"   |  \"+str(t)+\"  X  \"+str(i)+\"  =  \"+str(t*i)+\"  |\")\n",
    "        i=i+step\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def maxpow(fact,num):\n",
    "    s=0\n",
    "    while(num<=fact): \n",
    "        s=s+(fact//num)\n",
    "        num=num*num\n",
    "    return s\n",
    "\n",
    "\n",
    "def primefact(n):\n",
    "    l=[]\n",
    "    for i in range(2,n+1):\n",
    "        if n%i==0:\n",
    "            c=0\n",
    "            for j in range(1,i+1):\n",
    "                if i%j==0:\n",
    "                    c=c+1\n",
    "            if c==2:\n",
    "                l.append(i)\n",
    "            else:\n",
    "                pass\n",
    "    return l\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9708c318",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36e0d536",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af1e83e9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "394202f6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eaf19b6d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "be4214b7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c8d99ebb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
